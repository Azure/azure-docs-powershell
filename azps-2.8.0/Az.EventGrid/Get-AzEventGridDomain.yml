### YamlMime:PowershellCmdlet
summary: |-
  Gets the details of an Event Grid domain, or gets a list of all Event Grid domains in the current Azure subscription.
module: Az.EventGrid
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Azure.Commands.EventGrid.Models.PSDomain" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Azure.Commands.EventGrid.Models.PSDomainListInstance" data-throw-if-not-resolved="False" />
  description: ""
syntaxes:
- >-
  Get-AzEventGridDomain [[-ResourceGroupName] <String>] [-ODataQuery <String>] [-Top <Int32>]

   [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  Get-AzEventGridDomain [-ResourceGroupName] <String> [-Name] <String> [-ODataQuery <String>] [-Top <Int32>]

   [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  Get-AzEventGridDomain [-ResourceId] <String> [-ODataQuery <String>] [-Top <Int32>]

   [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- Get-AzEventGridDomain [-NextLink <String>] [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    PS C:\> Get-AzEventGridDomain -ResourceGroup MyResourceGroupName -Name Domain1

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain1
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain1
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain1.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag1, Value1], [Tag2, Value2]}
  description: ""
  summary: |+
    Gets the details of Event Grid domain \`Domain1\` in resource group \`MyResourceGroupName\`.

- title: Example 2
  code: |-
    PS C:\> Get-AzEventGridDomain -ResourceId "/subscriptions/$subscriptionId/resourceGroups/MyResourceGroupName/providers/Microsoft.EventGrid/domains/Domain1"

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain1
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain1
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain1.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag1, Value1], [Tag2, Value2]}
  description: ""
  summary: |+
    Gets the details of Event Grid domain \`Domain1\` in resource group \`MyResourceGroupName\` using ResourceId option.

- title: Example 3
  code: |-
    PS C:\> $result=Get-AzEventGridDomain -ResourceGroup MyResourceGroupName
    PS C:\> echo $result.PsDomainsList

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain1
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain1
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain1.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag1, Value1], [Tag2, Value2]}

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain2
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain2
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain2.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              :

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain3
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain3
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain3.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag3, Value3], [Tag4, Value4]}

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain4
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname/providers/Microsoft.EventGrid/domains/domain4
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain4.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              :
  description: ""
  summary: |+
    List all the Event Grid domains in resource group \`MyResourceGroupName\` without pagination (all domains are returned in one shot)

- title: Example 4
  code: |-
    PS C:\> $total = 0
    PS C:\> $odataFilter = "Name ne 'ABCD'"
    PS C:\> $result = Get-AzEventGridDomain -ResourceGroup MyResourceGroupName -Top 10 -ODataQuery $odataFilter
    PS C:\> $total += $result.Count
    PS C:\> while ($result.NextLink -ne $Null)
        {
            $result = Get-AzEventGridDomain -NextLink $result.NextLink
            $total += $result.Count
        }

    PS C:\> echo "Total number of domains is $Total"
  description: ""
  summary: |+
    List the Event Grid domains (if any) in resource group \`MyResourceGroupName\` that satisfies the $odataFilter query 10 domains at a time. If more results are available, the $result.NextLink will not be $null. In order to get next page(s) of domains, user is expected to re-call Get-AzEventGridDomain and uses result.NextLink obtained from the previous call. Caller should stop when result.NextLink becomes $null.

- title: Example 5
  code: |-
    PS C:\> $result=Get-AzEventGridDomain
    PS C:\> echo $result.PsDomainsList

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain1
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname1/providers/Microsoft.EventGrid/domains/domain1
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain1.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag1, Value1], [Tag2, Value2]}

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain2
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname1/providers/Microsoft.EventGrid/domains/domain2
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain2.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              :

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain3
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname2/providers/Microsoft.EventGrid/domains/domain3
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain3.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              : {[Tag3, Value3], [Tag4, Value4]}

    ResourceGroupName : MyResourceGroupName
    DomainName        : Domain4
    Id                : /subscriptions/<Azure Subscription Id>/resourceGroups/myresourcegroupname3/providers/Microsoft.EventGrid/domains/domain4
    Type              : Microsoft.EventGrid/domains
    Location          : westus2
    Endpoint          : https://domain4.westus2-1.eventgrid.azure.net/api/events
    ProvisioningState : Succeeded
    Tags              :
  description: ""
  summary: |+
    List all the Event Grid domains in Azure Subscription without pagination (all domains are returned in one shot)

- title: Example 6
  code: |-
    PS C:\> $total = 0
    PS C:\> $odataFilter = "Contains(Name, 'ABCD')"
    PS C:\> $result = Get-AzEventGridDomain -Top 20 -ODataQuery $odataFilter
    PS C:\> $total += $result.Count
    PS C:\> while ($result.NextLink -ne $Null)
        {
            $result = Get-AzEventGridDomain -NextLink $result.NextLink
            $total += $result.Count
        }
    PS C:\> echo "Total number of domains is $Total"
  description: ""
  summary: |+
    List the Event Grid domains (if any) in Azure Subscription that satisfies the $odataFilter query 20 domains at a time. If more results are available, the $result.NextLink will not be $null. In order to get next page(s) of domains, user is expected to re-call Get-AzEventGridDomain and uses result.NextLink obtained from the previous call. Caller should stop when result.NextLink becomes $null.

parameters:
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with Azure.

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    EventGrid domain name.

  defaultValue: None
  position: "1"
  aliases: DomainName
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: NextLink
  description: |+
    The link for the next page of resources to be obtained.
    This value is obtained with the first Get-AzEventGrid cmdlet call when more resources are still available to be queried.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ODataQuery
  description: |+
    The OData query used for filtering the list results.
    Filtering is currently allowed on the Name property only.The supported operations include: CONTAINS, eq (for equal), ne (for not equal), AND, OR and NOT.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ResourceGroupName
  isRequired: true
  description: |+
    The name of the resource group.

  defaultValue: None
  position: "0"
  aliases: ResourceGroup
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ResourceId
  isRequired: true
  description: |+
    Resource Identifier representing the Event Grid Domain.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: Top
  description: |+
    The maximum number of resources to be obtained.
    Valid value is between 1 and 100.
    If top value is specified and more results are still available, the result will contain a link to the next page to be queried in NextLink.
    If the Top value is not specified, the full list of resources will be returned at once.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Az.EventGrid.Get-AzEventGridDomain
name: Get-AzEventGridDomain
description: |-
  The Get-AzEventGridDomain cmdlet gets either the details of a specified Event Grid domain, or a list of all Event Grid domains in the current Azure subscription.
  If the domain name is provided, the details of a single Event Grid domain is returned.
  If the domain name is not provided, a list of domains is returned. The number of elements returned in this list is controlled by the Top parameter. If the Top value is not specified or $null, the list will contain all the domains items returned at once. Otherwise, Top will indicate the maximum number of elements to be returned in the list.
  If more domains are still available, the value in NextLink should be used in the next call to get the next page of domains.
  Finally, ODataQuery parameter is used to perform filtering for the search results. The filtering query follows OData syntax using the Name property only. The supported operations include: CONTAINS, eq (for equal), ne (for not equal), AND, OR and NOT.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.EventGrid.dll-Help.xml
  Module Name: Az.EventGrid
  online version: https://docs.microsoft.com/en-us/powershell/module/az.eventgrid/get-azeventgriddomain
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/EventGrid/EventGrid/help/Get-AzEventGridDomain.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/EventGrid/EventGrid/help/Get-AzEventGridDomain.md
