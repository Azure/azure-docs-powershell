### YamlMime:PowershellCmdlet
summary: |-
  Creates a VMSS.
module: Az.Compute
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Azure.Commands.Compute.Automation.Models.PSVirtualMachineScaleSet" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="False" /><span>[</span><xref href="" data-throw-if-not-resolved="False" /><span>[</span><xref href="System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" data-throw-if-not-resolved="False" /><span>]</span><span>]</span>
  description: ""
outputs:
- name: <xref href="Microsoft.Azure.Commands.Compute.Automation.Models.PSVirtualMachineScaleSet" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AzVmss
  href: ./Get-AzVmss.yml
- text: Remove-AzVmss
  href: ./Remove-AzVmss.yml
- text: Restart-AzVmss
  href: ./Restart-AzVmss.yml
- text: Set-AzVmss
  href: ./Set-AzVmss.yml
- text: Start-AzVmss
  href: ./Start-AzVmss.yml
- text: Stop-AzVmss
  href: ./Stop-AzVmss.yml
- text: Update-AzVmss
  href: ./Update-AzVmss.yml
syntaxes:
- >-
  New-AzVmss [-ResourceGroupName] <String> [-VMScaleSetName] <String>

   [-VirtualMachineScaleSet] <PSVirtualMachineScaleSet> [-AsJob] [-DefaultProfile <IAzureContextContainer>]

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  New-AzVmss [[-ResourceGroupName] <String>] [-VMScaleSetName] <String> [-AsJob] [-ImageName <String>]

   -Credential <PSCredential> [-InstanceCount <Int32>] [-VirtualNetworkName <String>] [-SubnetName <String>]

   [-PublicIpAddressName <String>] [-DomainNameLabel <String>] [-SecurityGroupName <String>]

   [-LoadBalancerName <String>] [-BackendPort <Int32[]>] [-Location <String>] [-VmSize <String>]

   [-UpgradePolicyMode <UpgradeMode>] [-AllocationMethod <String>] [-VnetAddressPrefix <String>]

   [-SubnetAddressPrefix <String>] [-FrontendPoolName <String>] [-BackendPoolName <String>]

   [-SystemAssignedIdentity] [-UserAssignedIdentity <String>] [-EnableUltraSSD]

   [-Zone <System.Collections.Generic.List`1[System.String]>] [-NatBackendPort <Int32[]>]

   [-DataDiskSizeInGb <Int32[]>] [-ProximityPlacementGroup <String>] [-Priority <String>]

   [-EvictionPolicy <String>] [-MaxPrice <Double>] [-DefaultProfile <IAzureContextContainer>]

   [-SinglePlacementGroup] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Create a VMSS using the **`SimpleParameterSet`**'
  code: |-
    $vmssName = <VMSSNAME>
    # Create credentials, I am using one way to create credentials, there are others as well. 
    # Pick one that makes the most sense according to your use case.
    $vmPassword = ConvertTo-SecureString <PASSWORD_HERE> -AsPlainText -Force
    $vmCred = New-Object System.Management.Automation.PSCredential(<USERNAME_HERE>, $vmPassword)

    #Create a VMSS using the default settings
    New-AzVmss -Credential $vmCred -VMScaleSetName $vmssName
  description: |-
    The command above creates the following with the name `$vmssName` :
    * A Resource Group
    * A virtual network
    * A load balancer
    * A public IP
    * the VMSS with 2 instances

    The default image chosen for the VMs in the VMSS is `2016-Datacenter Windows Server` and the SKU is `Standard_DS1_v2`
  summary: ""
- title: 'Example 2: Create a VMSS using the **`DefaultParameterSet`**'
  code: "# Common\r\n$LOC = \"WestUs\";\r\n$RGName = \"rgkyvms\";\r\n\r\nNew-AzResourceGroup -Name $RGName -Location $LOC -Force;\r\n\r\n# SRP\r\n$STOName = \"STO\" + $RGName;\r\n$STOType = \"Standard_GRS\";\r\nNew-AzStorageAccount -ResourceGroupName $RGName -Name $STOName -Location $LOC -Type $STOType;\r\n$STOAccount = Get-AzStorageAccount -ResourceGroupName $RGName -Name $STOName; \r\n\r\n# NRP\r\n$SubNet = New-AzVirtualNetworkSubnetConfig -Name (\"subnet\" + $RGName) -AddressPrefix \"10.0.0.0/24\";\r\n$VNet = New-AzVirtualNetwork -Force -Name (\"vnet\" + $RGName) -ResourceGroupName $RGName -Location $LOC -AddressPrefix \"10.0.0.0/16\" -DnsServer \"10.1.1.1\" -Subnet $SubNet;\r\n$VNet = Get-AzVirtualNetwork -Name ('vnet' + $RGName) -ResourceGroupName $RGName;\r\n$SubNetId = $VNet.Subnets[0].Id;\r\n\r\n$PubIP = New-AzPublicIpAddress -Force -Name (\"PubIP\" + $RGName) -ResourceGroupName $RGName -Location $LOC -AllocationMethod Dynamic -DomainNameLabel (\"PubIP\" + $RGName);\r\n$PubIP = Get-AzPublicIpAddress -Name (\"PubIP\"  + $RGName) -ResourceGroupName $RGName;\r\n\r\n# Create LoadBalancer\r\n$FrontendName = \"fe\" + $RGName\r\n$BackendAddressPoolName = \"bepool\" + $RGName\r\n$ProbeName = \"vmssprobe\" + $RGName\r\n$InboundNatPoolName  = \"innatpool\" + $RGName\r\n$LBRuleName = \"lbrule\" + $RGName\r\n$LBName = \"vmsslb\" + $RGName\r\n\r\n$Frontend = New-AzLoadBalancerFrontendIpConfig -Name $FrontendName -PublicIpAddress $PubIP\r\n$BackendAddressPool = New-AzLoadBalancerBackendAddressPoolConfig -Name $BackendAddressPoolName\r\n$Probe = New-AzLoadBalancerProbeConfig -Name $ProbeName -RequestPath healthcheck.aspx -Protocol http -Port 80 -IntervalInSeconds 15 -ProbeCount 2\r\n$InboundNatPool = New-AzLoadBalancerInboundNatPoolConfig -Name $InboundNatPoolName  -FrontendIPConfigurationId `\r\n    $Frontend.Id -Protocol Tcp -FrontendPortRangeStart 3360 -FrontendPortRangeEnd 3362 -BackendPort 3370;\r\n$LBRule = New-AzLoadBalancerRuleConfig -Name $LBRuleName `\r\n    -FrontendIPConfiguration $Frontend -BackendAddressPool $BackendAddressPool `\r\n    -Probe $Probe -Protocol Tcp -FrontendPort 80 -BackendPort 80 `\r\n    -IdleTimeoutInMinutes 15 -EnableFloatingIP -LoadDistribution SourceIP;\r\n$ActualLb = New-AzLoadBalancer -Name $LBName -ResourceGroupName $RGName -Location $LOC `\r\n    -FrontendIpConfiguration $Frontend -BackendAddressPool $BackendAddressPool `\r\n    -Probe $Probe -LoadBalancingRule $LBRule -InboundNatPool $InboundNatPool;\r\n$ExpectedLb = Get-AzLoadBalancer -Name $LBName -ResourceGroupName $RGName\r\n\r\n# New VMSS Parameters\r\n$VMSSName = \"VMSS\" + $RGName;\r\n\r\n$AdminUsername = \"Admin01\";\r\n$AdminPassword = \"p4ssw0rd@123\" + $RGName;\r\n\r\n$PublisherName = \"MicrosoftWindowsServer\" \r\n$Offer         = \"WindowsServer\" \r\n$Sku           = \"2012-R2-Datacenter\" \r\n$Version       = \"latest\"\r\n        \r\n$VHDContainer = \"https://\" + $STOName + \".blob.core.contoso.net/\" + $VMSSName;\r\n\r\n$ExtName = \"CSETest\";\r\n$Publisher = \"Microsoft.Compute\";\r\n$ExtType = \"BGInfo\";\r\n$ExtVer = \"2.1\";\r\n\r\n#IP Config for the NIC\r\n$IPCfg = New-AzVmssIPConfig -Name \"Test\" `\r\n    -LoadBalancerInboundNatPoolsId $ExpectedLb.InboundNatPools[0].Id `\r\n    -LoadBalancerBackendAddressPoolsId $ExpectedLb.BackendAddressPools[0].Id `\r\n    -SubnetId $SubNetId;\r\n            \r\n#VMSS Config\r\n$VMSS = New-AzVmssConfig -Location $LOC -SkuCapacity 2 -SkuName \"Standard_A2\" -UpgradePolicyMode \"Automatic\" `\r\n    | Add-AzVmssNetworkInterfaceConfiguration -Name \"Test\" -Primary $True -IPConfiguration $IPCfg `\r\n    | Add-AzVmssNetworkInterfaceConfiguration -Name \"Test2\"  -IPConfiguration $IPCfg `\r\n    | Set-AzVmssOSProfile -ComputerNamePrefix \"Test\"  -AdminUsername $AdminUsername -AdminPassword $AdminPassword `\r\n    | Set-AzVmssStorageProfile -Name \"Test\"  -OsDiskCreateOption 'FromImage' -OsDiskCaching \"None\" `\r\n    -ImageReferenceOffer $Offer -ImageReferenceSku $Sku -ImageReferenceVersion $Version `\r\n    -ImageReferencePublisher $PublisherName -VhdContainer $VHDContainer `\r\n    | Add-AzVmssExtension -Name $ExtName -Publisher $Publisher -Type $ExtType -TypeHandlerVersion $ExtVer -AutoUpgradeMinorVersion $True\r\n\r\n#Create the VMSS\r\nNew-AzVmss -ResourceGroupName $RGName -Name $VMSSName -VirtualMachineScaleSet $VMSS;"
  description: |-
    The complex example above creates a VMSS, following is an explanation of what is happening:
    * The first command creates a resource group with the specified name and location.
    * The second command uses the **New-AzStorageAccount** cmdlet to create a storage account.
    * The third command then uses the **Get-AzStorageAccount** cmdlet to get the storage account created in the second command and stores the result in the $STOAccount variable.
    * The fifth command uses the **New-AzVirtualNetworkSubnetConfig** cmdlet to create a subnet and stores the result in the variable named $SubNet.
    * The sixth command uses the **New-AzVirtualNetwork** cmdlet to create a virtual network and stores the result in the variable named $VNet.
    * The seventh command uses the **Get-AzVirtualNetwork** to get information about the virtual network created in the sixth command and stores the information in the variable named $VNet.
    * The eighth and ninth command uses the **New-AzPublicIpAddress** and **Get- AzureRmPublicIpAddress** to create and get information from that public IP address.
    * The commands store the information in the variable named $PubIP.
    * The tenth command uses the **New- AzureRmLoadBalancerFrontendIpConfig** cmdlet to create a frontend load balancer and stores the result in the variable named $Frontend.
    * The eleventh command uses the **New-AzLoadBalancerBackendAddressPoolConfig** to create a backend address pool configuration and stores the result in the variable named $BackendAddressPool.
    * The twelfth command uses the **New-AzLoadBalancerProbeConfig** to create a probe and stores the probe information in the variable named $Probe.
    * The thirteenth command uses the **New-AzLoadBalancerInboundNatPoolConfig** cmdlet to create a load balancer inbound network address translation (NAT) pool configuration.
    * The fourteenth command uses the **New-AzLoadBalancerRuleConfig** to create a load balancer rule configuration and stores the result in the variable named $LBRule.
    * The fifteenth command uses the **New-AzLoadBalancer** cmdlet to create a load balancer and stores the result in the variable named $ActualLb.
    * The sixteenth command uses the **Get-AzLoadBalancer** to get information about the load balancer that was created in the fifteenth command and stores the information in the variable named $ExpectedLb.
    * The seventeenth command uses the **New-AzVmssIPConfig** cmdlet to create a VMSS IP configuration and stores the information in the variable named $IPCfg.
    * The eighteenth command uses the **New-AzVmssConfig** cmdlet to create a VMSS configuration object and stores the result in the variable named $VMSS.
    * The nineteenth command uses the **New-AzVmss** cmdlet to create the VMSS.
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: AllocationMethod
  description: |+
    Allocation method for the Public IP Address of the Scale Set (Static or Dynamic).  If no value is supplied, allocation will be static.

  defaultValue: Static
  position: Named
  aliases: ""
  parameterValueGroup: Static, Dynamic
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsJob
  description: |+
    Run cmdlet in the background and return a Job to track progress.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: BackendPoolName
  description: |+
    The name of the backend address pool to use in the load balancer for this Scale Set.  If no value is provided, a new backend pool will be created, with the same name as the Scale Set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: BackendPort
  description: |+
    Backend port numbers used by the Scale Set load balancer to communicate with VMs in the Scale Set.  If no values are specified, ports 3389 and 5985 will be used for Windows VMS, and port 22 will be used for Linux VMs.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  isRequired: true
  description: |+
    The administrator credentials (username and password) for VMs in this Scale Set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DataDiskSizeInGb
  description: |+
    Specifies the sizes of data disks in GB.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with azure.

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: DomainNameLabel
  description: |+
    The domain name label for the public Fully-Qualified domain name (FQDN) for this Scale Set. This is the first component of the domain name that is automatically assigned to the Scale Set. Automatically assigned Domain names use the form (<DomainNameLabel>.<Location>.cloudapp.azure.com). If no value is supplied, the default domain name label will be the concatenation of <ScaleSetName> and <ResourceGroupName>.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: EnableUltraSSD
  description: |+
    Use UltraSSD disks for the VMs in the scale set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: EvictionPolicy
  description: |+
    The eviction policy for the low priority virtual machine scale set.  Only supported values are 'Deallocate' and 'Delete'.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FrontendPoolName
  description: |+
    The name of the frontend address pool to use in the Scale Set load balancer.  If no value is supplied, a new Frontend Address Pool will be created, with the same name as the scale set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ImageName
  description: |+
    The name of the image for VMs in this Scale Set. If no value is provided, the "Windows Server 2016 DataCenter" image will be used.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" />
  name: InstanceCount
  description: |+
    The number of VM images in the Scale Set.  If no value is provided, 2 instances will be created.

  defaultValue: "2"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: LoadBalancerName
  description: |+
    The name of the load balancer to use with this Scale Set.  A new load balancer using the same name as the Scale Set will be created if no value is specified.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Location
  description: |+
    The Azure location where this Scale Set will be created.  If no value is specified, the location will be inferred from the location of other resources referenced in the parameters.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Double" data-throw-if-not-resolved="False" />
  name: MaxPrice
  description: |+
    The max price of the billing of a low priority virtual machine scale set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Int32" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: NatBackendPort
  description: |+
    Backend port for inbound network address translation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Priority
  description: |+
    The priority for the virtual machine scale set.  Only supported values are 'Regular' and 'Low'.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ProximityPlacementGroup
  description: |+
    The name or resource id of the Proximity Placement Group to use with this Scale Set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PublicIpAddressName
  description: |+
    The name of the public IP Address to use with this scale set.  A new Public IPAddress with the same name as the Scale Set will be created if no value is provided.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ResourceGroupName
  isRequired: true
  description: |+
    Specifies the name of the resource group of the VMSS.  If no value is specified, a new ResourceGroup will be created using the same name as the Scale Set.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: SecurityGroupName
  description: |+
    The name of the network security group to apply to this Scale Set.  If no value is provided, a default network security group with the same name as the Scale Set will be created and applied to the Scale Set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SinglePlacementGroup
  description: |+
    Use this to create the Scale set in a single placement group, default is multiple groups

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: SubnetAddressPrefix
  description: |+
    The address prefix of the Subnet this ScaleSet will use. Default Subnet settings (192.168.1.0/24) will be applied if no value is provided.

  defaultValue: 192.168.1.0/24
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: SubnetName
  description: |+
    The name of the subnet to use with this Scale Set.  A new Subnet will be created with the same name as the Scale Set if no value is provided.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: SystemAssignedIdentity
  description: |+
    If the parameter is present then the VM(s) in the scale set is(are) assigned a managed system identity that is auto generated.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Management.Compute.Models.UpgradeMode" data-throw-if-not-resolved="False" />
  name: UpgradePolicyMode
  description: |+
    The upgrade policy mode for VM instances in this Scale Set.  Upgrade policy could specify Automatic, Manual, or Rolling upgrades.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Automatic, Manual, Rolling
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: UserAssignedIdentity
  description: |+
    The name of a managed service identity that should be assigned to the VM(s) in the scale set.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Compute.Automation.Models.PSVirtualMachineScaleSet" data-throw-if-not-resolved="False" />
  name: VirtualMachineScaleSet
  isRequired: true
  description: |+
    Specifies the **VirtualMachineScaleSet** object that contains the properties of the VMSS that this cmdlet creates.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: VirtualNetworkName
  description: |+
    The name fo the Virtual Network to use with this scale set.  If no value is supplied, a new virtual network with the same name as the Scale Set will be created.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: VMScaleSetName
  isRequired: true
  description: |+
    Specifies the name of the VMSS that this cmdlet creates.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: Name
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: VmSize
  description: |+
    The size of the VM instances in this scale set.  A default size (Standard_DS1_v2) will be used if no Size is specified.

  defaultValue: Standard_DS1_v2
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: VnetAddressPrefix
  description: |+
    The address prefix for the virtual network used with this Scale Set.  Default virtual network address prefix settings (192.168.0.0/16) will be used if no value is supplied.

  defaultValue: 192.168.0.0/16
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
- type: <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="False" /><span>[</span><xref href="System.String" data-throw-if-not-resolved="False" /><span>]</span>
  name: Zone
  description: |+
    A list of availability zones denoting the IP allocated for the resource needs to come from.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Az.Compute.New-AzVmss
name: New-AzVmss
description: |-
  The **New-AzVmss** cmdlet creates a Virtual Machine Scale Set (VMSS) in Azure.
  Use the simple parameter set (`SimpleParameterSet`) to quickly create a pre-set VMSS and associated resources. Use the default parameter set (`DefaultParameter`) for more advanced scenarios when you need to precisely configure each component of the VMSS and each associated resource before creation.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.Compute.dll-Help.xml
  Module Name: Az.Compute
  ms.assetid: 1A2C843C-6962-4B0E-ACBF-A5EFF609A5BE
  online version: https://docs.microsoft.com/en-us/powershell/module/az.compute/new-azvmss
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Compute/Compute/help/New-AzVmss.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Compute/Compute/help/New-AzVmss.md
