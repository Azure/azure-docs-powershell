### YamlMime:PowershellCmdlet
summary: |-
  Creates an Automation certificate.
module: Az.Automation
notes: |-
  This command should be run on a machine that you are an administrator of, as well as in an elevated PowerShell session; before the certificate is uploaded, this cmdlet uses the local X.509 store to retrieve the thumbprint and key, and if this cmdlet is run outside of an elevated PowerShell session, you will receive an "Access denied" error.
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Security.SecureString" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Azure.Commands.Automation.Model.CertificateInfo" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AzAutomationCertificate
  href: ./Get-AzAutomationCertificate.yml
- text: Remove-AzAutomationCertificate
  href: ./Remove-AzAutomationCertificate.yml
- text: Set-AzAutomationCertificate
  href: ./Set-AzAutomationCertificate.yml
syntaxes:
- >-
  New-AzAutomationCertificate [-Name] <String> [-Description <String>] [-Password <SecureString>]

   [-Path] <String> [-Exportable] [-ResourceGroupName] <String> [-AutomationAccountName] <String>

   [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
examples:
- title: 'Example 1: Create a new certificate'
  code: |-
    PS C:\>$Password = ConvertTo-SecureString -String "Password" -AsPlainText -Force
    PS C:\> New-AzAutomationCertificate -AutomationAccountName "Contoso17" -Name "ContosoCertificate" -Path "./cert.pfx" -Password $Password -ResourceGroupName "ResourceGroup01"
  description: |-
    The first command converts a plain text password to be a secure string by using the ConvertTo-SecureString cmdlet.
    The command stores that object in the $Password variable.
    The second command creates a certificate named ContosoCertificate.
    The command uses the password stored in $Password.
    The command specifies the account name and the path of the file that it uploads.
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: AutomationAccountName
  isRequired: true
  description: |+
    Specifies the name of the Automation account for which this cmdlet stores the certificate.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with azure

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Specifies a description for the certificate.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Exportable
  description: |+
    Specifies whether the certificate can be exported.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name for the certificate.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Security.SecureString" data-throw-if-not-resolved="False" />
  name: Password
  description: |+
    Specifies the password for the certificate file.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the path to a script file that this cmdlet uploads.
    The file can be a .cer or a .pfx file.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ResourceGroupName
  isRequired: true
  description: |+
    Specifies the name of the resource group for which this cmdlet creates a certificate.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
uid: Az.Automation.New-AzAutomationCertificate
name: New-AzAutomationCertificate
description: |-
  The **New-AzAutomationCertificate** cmdlet creates a certificate in Azure Automation.
  Provide the path to a certificate file to upload.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.Automation.dll-Help.xml
  Module Name: Az.Automation
  ms.assetid: A504099E-BA96-45C9-A7A6-195E7087A0D4
  online version: https://docs.microsoft.com/en-us/powershell/module/az.automation/new-azautomationcertificate
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Automation/Automation/help/New-AzAutomationCertificate.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Automation/Automation/help/New-AzAutomationCertificate.md
