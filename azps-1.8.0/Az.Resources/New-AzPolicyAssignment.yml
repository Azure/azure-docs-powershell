### YamlMime:PowershellCmdlet
summary: |-
  Creates a policy assignment.
module: Az.Resources
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AzPolicyDefinition
  href: ./Get-AzPolicyDefinition.yml
- text: Get-AzPolicyAssignment
  href: ./Get-AzPolicyAssignment.yml
- text: Remove-AzPolicyAssignment
  href: ./Remove-AzPolicyAssignment.yml
- text: Set-AzPolicyAssignment
  href: ./Set-AzPolicyAssignment.yml
syntaxes:
- >-
  New-AzPolicyAssignment -Name <String> -Scope <String> [-NotScope <String[]>] [-DisplayName <String>]

   [-Description <String>] [-PolicyDefinition <PSObject>] [-PolicySetDefinition <PSObject>] [-Metadata <String>]

   [-AssignIdentity] [-Location <String>] [-ApiVersion <String>] [-Pre]

   [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  New-AzPolicyAssignment -Name <String> -Scope <String> [-NotScope <String[]>] [-DisplayName <String>]

   [-Description <String>] -PolicyDefinition <PSObject> [-PolicySetDefinition <PSObject>]

   -PolicyParameterObject <Hashtable> [-Metadata <String>] [-AssignIdentity] [-Location <String>]

   [-ApiVersion <String>] [-Pre] [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  New-AzPolicyAssignment -Name <String> -Scope <String> [-NotScope <String[]>] [-DisplayName <String>]

   [-Description <String>] -PolicyDefinition <PSObject> [-PolicySetDefinition <PSObject>]

   -PolicyParameter <String> [-Metadata <String>] [-AssignIdentity] [-Location <String>] [-ApiVersion <String>]

   [-Pre] [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  New-AzPolicyAssignment -Name <String> -Scope <String> [-NotScope <String[]>] [-DisplayName <String>]

   [-Description <String>] [-PolicyDefinition <PSObject>] -PolicySetDefinition <PSObject>

   -PolicyParameterObject <Hashtable> [-Metadata <String>] [-AssignIdentity] [-Location <String>]

   [-ApiVersion <String>] [-Pre] [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
- >-
  New-AzPolicyAssignment -Name <String> -Scope <String> [-NotScope <String[]>] [-DisplayName <String>]

   [-Description <String>] [-PolicyDefinition <PSObject>] -PolicySetDefinition <PSObject>

   -PolicyParameter <String> [-Metadata <String>] [-AssignIdentity] [-Location <String>] [-ApiVersion <String>]

   [-Pre] [-DefaultProfile <IAzureContextContainer>] [<CommonParameters>]
examples:
- title: 'Example 1: Policy assignment at resource group level'
  code: |-
    PS C:\> $ResourceGroup = Get-AzResourceGroup -Name 'ResourceGroup11'
    PS C:\> $Policy = Get-AzPolicyDefinition -Name 'VirtualMachinePolicy'
    PS C:\> New-AzPolicyAssignment -Name 'VirtualMachinePolicyAssignment' -PolicyDefinition $Policy -Scope $ResourceGroup.ResourceId
  description: |-
    The first command gets a resource group named ResourceGroup11 by using the Get-AzResourceGroup cmdlet and stores it in the $ResourceGroup variable.
    The second command gets the policy definition named VirtualMachinePolicy by using the Get-AzPolicyDefinition cmdlet and stores it in the $Policy variable.
    The final command assigns the policy in $Policy at the level of the resource group identified by the **ResourceId** property of $ResourceGroup.
  summary: ""
- title: 'Example 2: Policy assignment at resource group level with policy parameter object'
  code: |-
    PS C:\> $ResourceGroup = Get-AzResourceGroup -Name 'ResourceGroup11'
    PS C:\> $Policy = Get-AzPolicyDefinition -BuiltIn | Where-Object {$_.Properties.DisplayName -eq 'Allowed locations'}
    PS C:\> $Locations = Get-AzLocation | where displayname -like '*east*'
    PS C:\> $AllowedLocations = @{'listOfAllowedLocations'=($Locations.location)}
    PS C:\> New-AzPolicyAssignment -Name 'RestrictLocationPolicyAssignment' -PolicyDefinition $Policy -Scope $ResourceGroup.ResourceId -PolicyParameterObject $AllowedLocations
  description: |-
    The first command gets a resource group named ResourceGroup11 by using the Get-AzResourceGroup cmdlet.
    The command stores that object in the $ResourceGroup variable.
    The second command gets the built-in policy definition for allowed locations by using the Get-AzPolicyDefinition cmdlet.
    The command stores that object in the $Policy variable.
    The third and fourth commands create an object containing all Azure regions with "east" in the name.
    The commands store that object in the $AllowedLocations variable.
    The final command assigns the policy in $Policy at the level of a resource group using the policy parameter object in $AllowedLocations.
    The **ResourceId** property of $ResourceGroup identifies the resource group.
  summary: ""
- title: 'Example 3: Policy assignment at resource group level with policy parameter file'
  code: |-
    {
        "listOfAllowedLocations":  {
          "value": [
            "westus",
            "westeurope",
            "japanwest"
          ]
        }
    }

    PS C:\> $ResourceGroup = Get-AzResourceGroup -Name 'ResourceGroup11'
    PS C:\> $Policy = Get-AzPolicyDefinition -BuiltIn | Where-Object {$_.Properties.DisplayName -eq 'Allowed locations'}
    PS C:\> New-AzPolicyAssignment -Name 'RestrictLocationPolicyAssignment' -PolicyDefinition $Policy -Scope $ResourceGroup.ResourceId -PolicyParameter .\AllowedLocations.json
  description: |-
    The first command gets a resource group named ResourceGroup11 by using the Get-AzResourceGroup cmdlet and stores it in the $ResourceGroup variable.
    The second command gets the built-in policy definition for allowed locations by using the Get-AzPolicyDefinition cmdlet and stores it in the $Policy variable.
    The final command assigns the policy in $Policy at the resource group identified by the **ResourceId** property of $ResourceGroup using the policy parameter file AllowedLocations.json from the local working directory.
  summary: |+
    Create a file called _AllowedLocations.json_ in the local working directory with the following content.

- title: 'Example 4: Policy assignment with a managed identity'
  code: |-
    PS C:\> $ResourceGroup = Get-AzResourceGroup -Name 'ResourceGroup11'
    PS C:\> $Policy = Get-AzPolicyDefinition -Name 'VirtualMachinePolicy'
    PS C:\> New-AzPolicyAssignment -Name 'VirtualMachinePolicyAssignment' -PolicyDefinition $Policy -Scope $ResourceGroup.ResourceId -Location 'eastus' -AssignIdentity
  description: |-
    The first command gets a resource group named ResourceGroup11 by using the Get-AzResourceGroup cmdlet and stores it in the $ResourceGroup variable.
    The second command gets the policy definition named VirtualMachinePolicy by using the Get-AzPolicyDefinition cmdlet and stores it in the $Policy variable.
    The final command assigns the policy in $Policy to the resource group. A managed identity is automatically created and assigned to the policy assignment.
  summary: ""
parameters:
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: ApiVersion
  description: |+
    Specifies the version of the resource provider API to use.
    If you do not specify a version, this cmdlet uses the latest available version.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AssignIdentity
  description: |+
    Generate and assign an Azure Active Directory Identity for this policy assignment. The identity will be used when executing deployments for 'deployIfNotExists' policies. Location is required when assigning an identity.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with azure

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    The description for policy assignment

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: DisplayName
  description: |+
    Specifies a display name for the policy assignment.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Location
  description: |+
    The location of the policy assignment's resource identity. This is required when the -AssignIdentity switch is used.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Metadata
  description: |+
    The metadata for the new policy assignment. This can either be a path to a file name containing the metadata, or the metadata as a string.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies a name for the policy assignment.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: NotScope
  description: |+
    The not scopes for policy assignment.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: PolicyDefinition
  isRequired: true
  description: |+
    Specifies a policy, as a **PsPolicyDefinition** object that contains the policy rule.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: PolicyParameter
  isRequired: true
  description: |+
    The policy parameter file path or policy parameter string.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: PolicyParameterObject
  isRequired: true
  description: |+
    The policy parameter object.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.PSObject" data-throw-if-not-resolved="False" />
  name: PolicySetDefinition
  isRequired: true
  description: |+
    The policy set definition object.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Pre
  description: |+
    Indicates that this cmdlet considers pre-release API versions when it automatically determines which version to use.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Scope
  isRequired: true
  description: |+
    Specifies the scope at which to assign the policy.
    For instance, to assign a policy to a resource group, specify the following:
    `/subscriptions/`subscription ID`/resourcegroups/`resource group name

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Az.Resources.New-AzPolicyAssignment
name: New-AzPolicyAssignment
description: |-
  The **New-AzPolicyAssignment** cmdlet creates a policy assignment.
  Specify a policy and scope.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.ResourceManager.dll-Help.xml
  Module Name: Az.Resources
  ms.assetid: BA40BD11-8167-48D7-AC71-72B2FD9924F2
  online version: https://docs.microsoft.com/en-us/powershell/module/az.resources/new-azpolicyassignment
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Resources/Resources/help/New-AzPolicyAssignment.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Resources/Resources/help/New-AzPolicyAssignment.md
