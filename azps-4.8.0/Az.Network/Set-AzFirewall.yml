### YamlMime:PowershellCmdlet
summary: |-
  Saves a modified Firewall.
module: Az.Network
notes: ""
inputs:
- name: <xref href="Microsoft.Azure.Commands.Network.Models.PSAzureFirewall" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Azure.Commands.Network.Models.PSAzureFirewall" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AzFirewall
  href: ./Get-AzFirewall.yml
- text: New-AzFirewall
  href: ./New-AzFirewall.yml
- text: Remove-AzFirewall
  href: ./Remove-AzFirewall.yml
syntaxes:
- >-
  Set-AzFirewall -AzureFirewall <PSAzureFirewall> [-AsJob] [-DefaultProfile <IAzureContextContainer>] [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: '1:  Update priority of a Firewall application rule collection'
  code: |-
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $ruleCollection = $azFw.GetApplicationRuleCollectionByName("ruleCollectionName")
    $ruleCollection.Priority = 101
    Set-AzFirewall -AzureFirewall $azFw
  description: |-
    This example updates the priority of an existing rule collection of an Azure Firewall.
    Assuming Azure Firewall "AzureFirewall" in resource group "rg" contains an application rule collection named 
    "ruleCollectionName", the commands above will change the priority of that rule collection and update the 
    Azure Firewall afterwards. Without the Set-AzFirewall command, all operations performed on the local $azFw 
    object are not reflected on the server.
  summary: ""
- title: '2:  Create a Azure Firewall and set an application rule collection later'
  code: |-
    $azFw = New-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg" -VirtualNetworkName "vnet-name" -PublicIpName "pip-name"

    $rule = New-AzFirewallApplicationRule -Name R1 -Protocol "http:80","https:443" -TargetFqdn "*google.com", "*microsoft.com" -SourceAddress "10.0.0.0"
    $RuleCollection = New-AzFirewallApplicationRuleCollection -Name RC1 -Priority 100 -Rule $rule -ActionType "Allow"
    $azFw.ApplicationRuleCollections = $RuleCollection

    $azFw | Set-AzFirewall
  description: |-
    In this example, a Firewall is created first without any application rule collections. Afterwards a Application Rule 
    and Application Rule Collection are created, then the Firewall object is modified in memory, without affecting 
    the real configuration in cloud. For changes to be reflected in cloud, Set-AzFirewall must be called.
  summary: ""
- title: '3:  Update Threat Intel operation mode of Azure Firewall'
  code: |-
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.ThreatIntelMode = "Deny"
    Set-AzFirewall -Firewall $azFw
  description: |-
    This example updates the Threat Intel operation mode of Azure Firewall "AzureFirewall" in resource group "rg".
    Without the Set-AzFirewall command, all operations performed on the local $azFw object are not reflected on the server.
  summary: ""
- title: '4: Deallocate and allocate the Firewall'
  code: |-
    $firewall=Get-AzFirewall -ResourceGroupName rgName -Name azFw
    $firewall.Deallocate()
    $firewall | Set-AzFirewall

    $vnet = Get-AzVirtualNetwork -ResourceGroupName rgName -Name anotherVNetName
    $pip = Get-AzPublicIpAddress - ResourceGroupName rgName -Name publicIpName
    $firewall.Allocate($vnet, $pip)
    $firewall | Set-AzFirewall
  description: |-
    This example retrieves a Firewall, deallocates the firewall, and saves it. The Deallocate command removes the running 
    service but preserves the firewall's configuration. For changes to be reflected in cloud, Set-AzFirewall must be called.
    If user wants to start the service again, the Allocate method should be called on the firewall.
    The new VNet and Public IP must be in the same resource group as the Firewall. Again, for changes to be reflected in cloud,
    Set-AzFirewall must be called.
  summary: ""
- title: '5: Allocate with a management public IP address for forced tunneling scenarios'
  code: |-
    $vnet = Get-AzVirtualNetwork -ResourceGroupName rgName -Name anotherVNetName
    $pip = Get-AzPublicIpAddress - ResourceGroupName rgName -Name publicIpName
    $mgmtPip = Get-AzPublicIpAddress - ResourceGroupName rgName -Name MgmtPublicIpName
    $firewall.Allocate($vnet, $pip, $mgmtPip)
    $firewall | Set-AzFirewall
  description: |-
    This example allocates the firewall with a management public IP address and subnet for forced tunneling scenarios. The VNet must contain a subnet called "AzureFirewallManagementSubnet".
  summary: ""
- title: '6:	Add a Public IP address to an Azure Firewall'
  code: |-
    $pip = New-AzPublicIpAddress -Name "azFwPublicIp1" -ResourceGroupName "rg" -Sku "Standard" -Location "centralus" -AllocationMethod Static
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.AddPublicIpAddress($pip)

    $azFw | Set-AzFirewall
  description: |-
    In this example, the Public IP Address "azFwPublicIp1" as attached to the Firewall.
  summary: ""
- title: '7:	Remove a Public IP address from an Azure Firewall'
  code: |-
    $pip = Get-AzPublicIpAddress -Name "azFwPublicIp1" -ResourceGroupName "rg"
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.RemovePublicIpAddress($pip)

    $azFw | Set-AzFirewall
  description: |-
    In this example, the Public IP Address "azFwPublicIp1" as detached from the Firewall.
  summary: ""
- title: '8:	Change the management public IP address on an Azure Firewall'
  code: |-
    $newMgmtPip = New-AzPublicIpAddress -Name "azFwMgmtPublicIp2" -ResourceGroupName "rg" -Sku "Standard" -Location "centralus" -AllocationMethod Static
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.ManagementIpConfiguration.PublicIpAddress = $newMgmtPip

    $azFw | Set-AzFirewall
  description: |-
    In this example, the management public IP address of the firewall will be changed to "AzFwMgmtPublicIp2"
  summary: ""
- title: '9:	Add DNS configuration to an Azure Firewall'
  code: |-
    $dnsServers = @("10.10.10.1", "20.20.20.2")
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.DNSEnableProxy = $true
    $azFw.DNSServer = $dnsServers

    $azFw | Set-AzFirewall
  description: |-
    In this example, DNS Proxy and DNS Server configuration is attached to the Firewall.
  summary: ""
- title: '10:	Update destination of an existing rule within a Firewall application rule collection'
  code: |-
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $ruleCollection = $azFw.GetNetworkRuleCollectionByName("ruleCollectionName")
    $rule=$ruleCollection.GetRuleByName("ruleName")
    $rule.DestinationAddresses="10.10.10.10"
    Set-AzFirewall -AzureFirewall $azFw
  description: |-
    This example updates the destination of an existing rule within a rule collection of an Azure Firewall. This allows you to automatically update your rules when IP addresses change dynamically.
  summary: ""
- title: '11:	Allow Active FTP on Azure Firewall'
  code: |-
    $azFw = Get-AzFirewall -Name "AzureFirewall" -ResourceGroupName "rg"
    $azFw.AllowActiveFTP = $true

    $azFw | Set-AzFirewall
  description: |-
    In this example, Active FTP is allowed on the Firewall.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsJob
  description: |+
    Run cmdlet in the background

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Network.Models.PSAzureFirewall" data-throw-if-not-resolved="False" />
  name: AzureFirewall
  isRequired: true
  description: |+
    The AzureFirewall

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with azure.

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Az.Network.Set-AzFirewall
name: Set-AzFirewall
description: |-
  The **Set-AzFirewall** cmdlet updates an Azure Firewall.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.Network.dll-Help.xml
  Module Name: Az.Network
  ms.assetid: 40E56EC1-3327-4DFF-8262-E2EEBB5E4447
  online version: https://docs.microsoft.com/en-us/powershell/module/az.network/set-azfirewall
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Network/Network/help/Set-AzFirewall.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Network/Network/help/Set-AzFirewall.md
