### YamlMime:PowershellCmdlet
summary: |-
  Updates a DNS record set.
module: Az.Dns
notes: |-
  You can use the *Confirm* parameter to control whether this cmdlet prompts you for confirmation.
  By default, the cmdlet prompts you for confirmation if the $ConfirmPreference Windows PowerShell variable has a value of Medium or lower.
  If you specify *Confirm* or *Confirm:$True*, this cmdlet prompts you for confirmation before it runs.
  If you specify *Confirm:$False*, the cmdlet does not prompt you for confirmation.
inputs:
- name: <xref href="Microsoft.Azure.Commands.Dns.DnsRecordSet" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Azure.Commands.Dns.DnsRecordSet" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AzDnsRecordSet
  href: ./Get-AzDnsRecordSet.yml
- text: New-AzDnsRecordSet
  href: ./New-AzDnsRecordSet.yml
- text: Remove-AzDnsRecordSet
  href: ./Remove-AzDnsRecordSet.yml
syntaxes:
- >-
  Set-AzDnsRecordSet -RecordSet <DnsRecordSet> [-Overwrite] [-DefaultProfile <IAzureContextContainer>] [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Update a record set'
  code: |-
    PS C:\>$RecordSet = Get-AzDnsRecordSet -ResourceGroupName MyResourceGroup -ZoneName myzone.com -Name www -RecordType A
    PS C:\> Add-AzDnsRecordConfig -RecordSet $RecordSet -Ipv4Address 172.16.0.0
    PS C:\> Add-AzDnsRecordConfig -RecordSet $RecordSet -Ipv4Address 172.31.255.255
    PS C:\> Set-AzDnsRecordSet -RecordSet $RecordSet

    # These cmdlets can also be piped:

    PS C:\> Get-AzDnsRecordSet -ResourceGroupName MyResourceGroup -ZoneName myzone.com -Name www -RecordType A | Add-AzDnsRecordConfig -Ipv4Address 172.16.0.0 | Add-AzDnsRecordConfig -Ipv4Address 172.31.255.255 | Set-AzDnsRecordSet
  description: |-
    The first command uses the Get-AzDnsRecordSet cmdlet to get the specified record set, and then stores it in the $RecordSet variable.
    The second and third commands are off-line operations to add two A records to the record set.
    The final command uses the **Set-AzDnsRecordSet** cmdlet to commit the update.
  summary: ""
- title: 'Example 2: Update an SOA record'
  code: |-
    PS C:\>$RecordSet = Get-AzDnsRecordSet -Name "@" -RecordType SOA -Zone $Zone
    PS C:\> $RecordSet.Records[0].Email = "admin.myzone.com"
    PS C:\> Set-AzDnsRecordSet -RecordSet $RecordSet
  description: |-
    The first command uses the **Get-AzDnsRecordset** cmdlet to get the specified record set, and then stores it in the $RecordSet variable.
    The second command updates the specified SOA record in $RecordSet.
    The final command uses the **Set-AzDnsRecordSet** cmdlet to propagate the update in $RecordSet.
  summary: ""
parameters:
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with azure

  defaultValue: None
  position: Named
  aliases: AzContext, AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Overwrite
  description: |+
    Indicates to update the record set regardless of concurrent changes.
    The record set will not be updated if it has been changed in Azure DNS since the local **RecordSet** object was retrieved.
    This provides protection for concurrent changes.
    To suppress this behavior, you can use the *Overwrite* parameter, which results in the record set being updated regardless of concurrent changes.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Dns.DnsRecordSet" data-throw-if-not-resolved="False" />
  name: RecordSet
  isRequired: true
  description: |+
    Specifies the **RecordSet** to update.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Az.Dns.Set-AzDnsRecordSet
name: Set-AzDnsRecordSet
description: |-
  The **Set-AzDnsRecordSet** cmdlet updates a record set in the Azure DNS service from a local **RecordSet** object.
  You can pass a **RecordSet** object as a parameter or by using the pipeline operator.
  You can use the *Confirm* parameter and $ConfirmPreference Windows PowerShell variable to control whether the cmdlet prompts you for confirmation.
  The record set is not updated if it has been changed in Azure DNS since the local **RecordSet** object was retrieved.
  This provides protection for concurrent changes.
  You can suppress this behavior using the *Overwrite* parameter, which updates the record set regardless of concurrent changes.
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.Dns.dll-Help.xml
  Module Name: Az.Dns
  ms.assetid: 99E6C4DD-11AF-4DC0-848B-39811240BE06
  online version: https://docs.microsoft.com/en-us/powershell/module/az.dns/set-azdnsrecordset
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Dns/Dns/help/Set-AzDnsRecordSet.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Dns/Dns/help/Set-AzDnsRecordSet.md
