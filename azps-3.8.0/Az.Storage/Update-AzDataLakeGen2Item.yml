### YamlMime:PowershellCmdlet
summary: |-
  Update a file or directory on properties, metadata, permission, ACL, and owner.
module: Az.Storage
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel.AzureDataLakeGen2Item" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.IStorageContext" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel.AzureDataLakeGen2Item" data-throw-if-not-resolved="False" />
  description: ""
syntaxes:
- >-
  Update-AzDataLakeGen2Item [-FileSystem] <String> [-Path <String>] [-Permission <String>] [-Owner <String>]

   [-Group <String>] [-Property <Hashtable>] [-Metadata <Hashtable>] [-Acl <PSPathAccessControlEntry[]>]

   [-Context <IStorageContext>] [-DefaultProfile <IAzureContextContainer>] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Update-AzDataLakeGen2Item -InputObject <AzureDataLakeGen2Item> [-Permission <String>] [-Owner <String>]

   [-Group <String>] [-Property <Hashtable>] [-Metadata <Hashtable>] [-Acl <PSPathAccessControlEntry[]>]

   [-Context <IStorageContext>] [-DefaultProfile <IAzureContextContainer>] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: 'Example 1: Create an ACL object with 3 ACL entry, and update ACL to all items in a Filesystem recursively'
  code: |-
    PS C:\>$acl = New-AzDataLakeGen2ItemAclObject -AccessControlType user -Permission rwx 
    PS C:\>$acl = New-AzDataLakeGen2ItemAclObject -AccessControlType group -Permission rw- -InputObject $acl 
    PS C:\>$acl = New-AzDataLakeGen2ItemAclObject -AccessControlType other -Permission "rw-" -InputObject $acl
    PS C:\>Get-AzDataLakeGen2ChildItem -FileSystem "filesystem1" -Recurse | Update-AzDataLakeGen2Item -ACL $acl

       FileSystem Name: filesystem1

    Path                 IsDirectory  Length          LastModified         Permissions  Owner                Group               
    ----                 -----------  ------          ------------         -----------  -----                -----               
    dir1                 True                         2020-03-13 13:07:34Z rwxrw-rw-    $superuser           $superuser           
    dir1/file1           False        1024            2020-03-23 09:29:18Z rwxrw-rw-    $superuser           $superuser          
    dir2                 True                         2020-03-23 09:28:36Z rwxrw-rw-    $superuser           $superuser
  description: |-
    This command first creates an ACL object with 3 acl entry (use -InputObject parameter to add acl entry to existing acl object), then get all items in a filesystem and update acl on the items.
  summary: ""
- title: 'Example 2: Update all properties on a file, and show them'
  code: |-
    PS C:\> $file = Update-AzDataLakeGen2Item -FileSystem "filesystem1" -Path "dir1/file1" `
                     -Acl $acl `
                     -Property @{"ContentType" = "image/jpeg"; "ContentMD5" = "i727sP7HigloQDsqadNLHw=="; "ContentEncoding" = "UDF8"; "CacheControl" = "READ"; "ContentDisposition" = "True"; "ContentLanguage" = "EN-US"} `
                     -Metadata  @{"tag1" = "value1"; "tag2" = "value2" } `
                     -Permission rw-rw-rwx `
                     -Owner '$superuser' `
                     -Group '$superuser'

    PS C:\> $file

       FileSystem Name: filesystem1

    Path                 IsDirectory  Length          LastModified         Permissions  Owner                Group               
    ----                 -----------  ------          ------------         -----------  -----                -----               
    dir1/file1           False        1024            2020-03-23 09:57:33Z rwxrw-rw-    $superuser           $superuser          

    PS C:\> $file.ACL

    DefaultScope AccessControlType EntityId Permissions
    ------------ ----------------- -------- -----------
    False        User                       rwx        
    False        Group                      rw-        
    False        Other                      rw-        

    PS C:\> $file.Permissions

    Owner        : Execute, Write, Read
    Group        : Write, Read
    Other        : Write, Read
    StickyBit    : False
    ExtendedAcls : False

    PS C:\> $file.Properties.Metadata

    Key  Value 
    ---  ----- 
    tag2 value2
    tag1 value1

    PS C:\> $file.Properties


    LastModified          : 3/23/2020 9:57:33 AM +00:00
    CreatedOn             : 3/23/2020 9:29:18 AM +00:00
    Metadata              : {[tag2, value2], [tag1, value1]}
    CopyCompletedOn       : 1/1/0001 12:00:00 AM +00:00
    CopyStatusDescription : 
    CopyId                : 
    CopyProgress          : 
    CopySource            : 
    CopyStatus            : Pending
    IsIncrementalCopy     : False
    LeaseDuration         : Infinite
    LeaseState            : Available
    LeaseStatus           : Unlocked
    ContentLength         : 1024
    ContentType           : image/jpeg
    ETag                  : "0x8D7CF109B9878CC"
    ContentHash           : {139, 189, 187, 176...}
    ContentEncoding       : UDF8
    ContentDisposition    : True
    ContentLanguage       : EN-US
    CacheControl          : READ
    AcceptRanges          : bytes
    IsServerEncrypted     : True
    EncryptionKeySha256   : 
    AccessTier            : Cool
    ArchiveStatus         : 
    AccessTierChangedOn   : 1/1/0001 12:00:00 AM +00:00
  description: |-
    This command updates all properties on a file (ACL, permission,owner, group, metadata, property can be updated with any conbination), and show them in Powershell console.
  summary: ""
- title: 'Example 3: Add an ACL entry to a directory'
  code: |-
    ## Get the origin ACL
    PS C:\> $acl = (Get-AzDataLakeGen2Item -FileSystem "filesystem1" -Path 'dir1/dir3/').ACL

    # Update permission of a new ACL entry (if ACL entry with same AccessControlType/EntityId/DefaultScope not exist, will add a new ACL entry, else update permission of existing ACL entry)
    PS C:\> $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType user -EntityId $id -Permission rw- -InputObject $acl  

    # set the new acl to the directory
    PS C:\> update-AzDataLakeGen2Item -FileSystem "filesystem1" -Path 'dir1/dir3/' -ACL $acl

       FileSystem Name: filesystem1

    Path                 IsDirectory  Length          LastModified         Permissions  Owner                Group               
    ----                 -----------  ------          ------------         -----------  -----                -----               
    dir1/dir3            True                         2020-03-23 09:34:31Z rwxrw-rw-+   $superuser           $superuser
  description: |-
    This command gets ACL from a directory, updates/adds an ACL entry, and sets back to the directory.
    If ACL entry with same AccessControlType/EntityId/DefaultScope not exist, will add a new ACL entry, else update permission of existing ACL entry.
  summary: ""
parameters:
- type: <xref href="Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel.PSPathAccessControlEntry" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Acl
  description: |+
    Sets POSIX access control rights on files and directories.
    Create this object with New-AzDataLakeGen2ItemAclObject.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.IStorageContext" data-throw-if-not-resolved="False" />
  name: Context
  description: |+
    Azure Storage Context Object

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core.IAzureContextContainer" data-throw-if-not-resolved="False" />
  name: DefaultProfile
  description: |+
    The credentials, account, tenant, and subscription used for communication with Azure.

  defaultValue: None
  position: Named
  aliases: AzureRmContext, AzureCredential
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: FileSystem
  isRequired: true
  description: |+
    FileSystem name

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Group
  description: |+
    Sets the owning group of the blob.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel.AzureDataLakeGen2Item" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Azure Datalake Gen2 Item Object to update

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: Metadata
  description: |+
    Specifies metadata for the directory or file.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Owner
  description: |+
    Sets the owner of the blob.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Path
  description: |+
    The path in the specified Filesystem that should be updated.
    Can be a file or directory In the format 'directory/file.txt' or 'directory1/directory2/'.
    Not specify this parameter will update the root directory of the Filesystem.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.String" data-throw-if-not-resolved="False" />
  name: Permission
  description: |+
    Sets POSIX access permissions for the file owner, the file owning group, and others.
    Each class may be granted read, write, or execute permission.
    Symbolic (rwxrw-rw-) is supported.
    Invalid in conjunction with Acl.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  name: Property
  description: |+
    Specifies properties for the directory or file. 
    The supported properties for file are: CacheControl, ContentDisposition, ContentEncoding, ContentLanguage, ContentMD5, ContentType.
    The supported properties for directory are: CacheControl, ContentDisposition, ContentEncoding, ContentLanguage.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Management.Automation.SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Az.Storage.Update-AzDataLakeGen2Item
name: Update-AzDataLakeGen2Item
description: |-
  The **Update-AzDataLakeGen2Item** cmdlet updates a file or directory on properties, metadata, permission, ACL, and owner.
  This cmdlet only works if Hierarchical Namespace is enabled for the Storage account. This kind of account can be created by run "New-AzStorageAccount" cmdlet with "-EnableHierarchicalNamespace $true".
metadata:
  external help file: Microsoft.Azure.PowerShell.Cmdlets.Storage.dll-Help.xml
  Module Name: Az.Storage
  online version: https://docs.microsoft.com/en-us/powershell/module/az.storage/update-azdatalakegen2item
  schema: 2.0.0
  content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Storage/Storage.Management/help/Update-AzDataLakeGen2Item.md
  original_content_git_url: https://github.com/Azure/azure-powershell/blob/master/src/Storage/Storage.Management/help/Update-AzDataLakeGen2Item.md
